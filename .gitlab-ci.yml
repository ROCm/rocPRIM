# MIT License
#
# Copyright (c) 2017-2021 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

image: rocm/rocm-terminal:latest

stages:
  - build:cmake_latest   # Tests if builds succeed (CMake)
  - build:cmake_minimum  # Tests if builds succeed (CMake)
  - test    # Tests if unit tests are passing (CTest)
  - benchmark

variables:
  # Tested CMake versions
  CMAKE_MINIMUM_VERSION: 3.16.9
  CMAKE_MINIMUM_URL: "https://cmake.org/files/v3.16/cmake-3.16.9-Linux-x86_64.tar.gz"

  CMAKE_LATEST_VERSION: 3.21.4
  CMAKE_LATEST_URL: "https://cmake.org/files/v3.21/cmake-3.21.4-linux-x86_64.tar.gz" 
  # Cluster config

  # Image-specific helper
  SUDO_CMD: "sudo -E" # Must be "sudo" on images which don't use root user
  # Helper variables
  DEPS_DIR: $CI_PROJECT_DIR/deps
  BUILD_DIR: $CI_PROJECT_DIR/build

  CMAKE_MINIMUM_PATH: $DEPS_DIR/cmake-$CMAKE_MINIMUM_VERSION
  BUILD_MINIMUM_DIR: $BUILD_DIR/cmake-$CMAKE_MINIMUM_VERSION
  CMAKE_LATEST_PATH: $DEPS_DIR/cmake-$CMAKE_LATEST_VERSION
  BUILD_LATEST_DIR: $BUILD_DIR/cmake-$CMAKE_LATEST_VERSION
  PACKAGE_DIR: $BUILD_DIR/package

.deps:cmake-minimum:
  stage: build:cmake_minimum
  before_script:
    - $SUDO_CMD apt update -qq
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq libidn11 wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_MINIMUM_PATH ]; then mkdir -p $CMAKE_MINIMUM_PATH; wget --no-check-certificate --quiet -O - $CMAKE_MINIMUM_URL | tar --strip-components=1 -xz -C $CMAKE_MINIMUM_PATH
    - fi
    - export PATH=$CMAKE_MINIMUM_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_MINIMUM_VERSION
    paths:
      - $CMAKE_MINIMUM_PATH

.deps:cmake-latest:
  stage: build:cmake_latest
  before_script:
    - $SUDO_CMD apt update -qq
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_LATEST_PATH ]; then mkdir -p $CMAKE_LATEST_PATH; wget --no-check-certificate --quiet -O - $CMAKE_LATEST_URL | tar --strip-components=1 -xz -C $CMAKE_LATEST_PATH;
    - fi;
    - export PATH=$CMAKE_LATEST_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_LATEST_VERSION
    paths:
      - $CMAKE_LATEST_PATH

.deps-cpu:cmake-latest:
  stage: build:cmake_latest
  before_script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq apt-transport-https software-properties-common
    - $SUDO_CMD add-apt-repository ppa:ubuntu-toolchain-r/test
    # | Used in the script    | Build tools | Fetch from https:// | rocminfo calls lsmod
    - $SUDO_CMD apt install -y -qq wget tar xz-utils bzip2 libnuma-dev libunwind-dev git build-essential pkg-config ninja-build ca-certificates kmod g++-9
    # Fetch CMake only if the cache has not been restored
    - if [ ! -d $CMAKE_LATEST_PATH ]; then mkdir -p $CMAKE_LATEST_PATH; wget --no-check-certificate --quiet -O - $CMAKE_LATEST_URL | tar --strip-components=1 -xz -C $CMAKE_LATEST_PATH;
    - fi;
    - export PATH=$CMAKE_LATEST_PATH/bin:$PATH
    # Debug printing of environment for context when errors occur
    - hipconfig
  cache:
    key: $CMAKE_LATEST_VERSION
    paths:
      - $CMAKE_LATEST_PATH

.deps:doc:
  stage: test:doc
  before_script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq doxygen

build:cmake-latest:
  extends:
    - .deps:cmake-latest
  tags:
    - rocm
  script:
    - mkdir -p $BUILD_LATEST_DIR
    - cd $BUILD_LATEST_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      -D AMDGPU_TEST_TARGETS="gfx803;gfx900;gfx906"
      -S $CI_PROJECT_DIR
      -B $BUILD_LATEST_DIR
    - cmake
      --build $BUILD_LATEST_DIR
  artifacts:
    paths:
    - $BUILD_LATEST_DIR/test/test_*
    - $BUILD_LATEST_DIR/test/rocprim/test_*
    - $BUILD_LATEST_DIR/test/CTestTestfile.cmake
    - $BUILD_LATEST_DIR/test/rocprim/CTestTestfile.cmake
    - $BUILD_LATEST_DIR/gtest/
    - $BUILD_LATEST_DIR/CMakeCache.txt
    - $BUILD_LATEST_DIR/CTestTestfile.cmake
    expire_in: 2 weeks

# TODO: Enable the hip-cpu CI step
#build-cpu:cmake-latest:
#  extends:
#    - .deps-cpu:cmake-latest
#  tags:
#    - s9300
#    - rocm
#  script:
#    - mkdir -p $BUILD_LATEST_DIR
#    - cd $BUILD_LATEST_DIR
#    - cmake
#      -G Ninja
#      -D CMAKE_CXX_COMPILER=g++-9
#      -D CMAKE_CXX_FLAGS="-Wall -Wextra"
#      -D CMAKE_BUILD_TYPE=Release
#      -D BUILD_TEST=ON
#      -D BUILD_EXAMPLE=OFF
#      -D BUILD_BENCHMARK=OFF
#      -D USE_HIP_CPU=ON
#      -S $CI_PROJECT_DIR
#      -B $BUILD_LATEST_DIR
#    - cmake
#      --build $BUILD_LATEST_DIR
#      --parallel 3

build:cmake-minimum:
  extends:
    - .deps:cmake-minimum
  tags:
    - rocm
  needs:
    - job: build:cmake-latest
      artifacts: false
  script:
    - mkdir -p $BUILD_MINIMUM_DIR
    - cd $BUILD_MINIMUM_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_CXX_FLAGS="-Wall -Wextra -Werror"
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=ON
      -D BUILD_EXAMPLE=ON
      -D BUILD_BENCHMARK=ON
      -D DISABLE_WERROR=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      -D AMDGPU_TEST_TARGETS="gfx803;gfx900;gfx906"
      -B $BUILD_MINIMUM_DIR
      ../../.
    - cmake
      --build ./
  artifacts:
    paths:
    - $BUILD_MINIMUM_DIR/test/test_*
    - $BUILD_MINIMUM_DIR/test/rocprim/test_*
    - $BUILD_MINIMUM_DIR/test/CTestTestfile.cmake
    - $BUILD_MINIMUM_DIR/test/rocprim/CTestTestfile.cmake
    - $BUILD_MINIMUM_DIR/gtest/
    - $BUILD_MINIMUM_DIR/CMakeCache.txt
    - $BUILD_MINIMUM_DIR/CTestTestfile.cmake
    expire_in: 2 weeks

build:package:
  extends:
    - .deps:cmake-minimum
  tags:
    - rocm
  script:
    - mkdir -p $PACKAGE_DIR
    - cd $PACKAGE_DIR
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      -B $PACKAGE_DIR
      $CI_PROJECT_DIR
    - $SUDO_CMD cmake
      --build $PACKAGE_DIR
      --target install
    - $SUDO_CMD cpack
      -G "DEB;ZIP"
    - mkdir -p ../package_test && cd ../package_test
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      $CI_PROJECT_DIR/test/extra
    - cmake
      --build .
    - $SUDO_CMD ./test_rocprim_package
    - $SUDO_CMD ctest --output-on-failure --repeat-until-fail 2
  artifacts:
    paths:
      - $PACKAGE_DIR/rocprim*.deb
      - $PACKAGE_DIR/rocprim*.zip
    expire_in: 2 weeks

build:benchmark:
  extends:
    - .deps:cmake-latest
  tags:
    - mi25
    - rocm
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  script:
    - mkdir build
    - cd build
    # Build hipCUB benchmark
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TEST=OFF
      -D BUILD_EXAMPLE=OFF
      -D BUILD_BENCHMARK=ON
      -D DISABLE_WERROR=OFF
      -D AMDGPU_TARGETS="gfx803;gfx900;gfx906"
      ..
    - cmake
      --build .
  artifacts:
    paths:
      - build/benchmark/*
      - build/googlebenchmark/
    expire_in: 2 weeks

include: '.gitlab-ci-gputest.yml'

benchmark_view:rocm_mi25:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - mi25
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

benchmark_view:rocm_s9300:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - s9300
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

benchmark_view:rocm_vega20:
  extends:
    - .deps:cmake-latest
  stage: benchmark
  when: manual
  only:
    - ci-benchmark-extend
    - internal_benchmark
    - develop_stream
    - develop
    - master
  needs:
    - build:benchmark
  tags:
    - vega20
    - rocm
  script:
    - $SUDO_CMD cmake
      -D BENCHMARK_BINARY_DIR=build/benchmark
      -D BENCHMARK_OUTPUT_DIR=.
      -P ${CI_PROJECT_DIR}/.gitlab/RunBenchmarks.cmake

test:deb:
  stage: test
  needs:
    - build:package
  tags:
    - rocm
  extends:
    - .deps:cmake-minimum
  script:
    - $SUDO_CMD apt update -qq
    - $SUDO_CMD apt install -y -qq rocm-core
    - $SUDO_CMD dpkg -i $PACKAGE_DIR/rocprim*.deb
    - mkdir -p package_test && cd package_test
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=hipcc
      -D CMAKE_BUILD_TYPE=Release
      $CI_PROJECT_DIR/test/extra
    - cmake
      --build .
    - $SUDO_CMD ctest --output-on-failure --repeat-until-fail 2
    - $SUDO_CMD dpkg -r rocprim
  allow_failure: true

test:doc:
  stage: test
  needs: []
  before_script:
    - $SUDO_CMD rm /etc/apt/sources.list.d/rocm.list
    - $SUDO_CMD apt-get update -qq
    - $SUDO_CMD apt-get install -y -qq doxygen
  script:
    - cd doc
    - $SUDO_CMD doxygen Doxyfile
